{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Tahoma;\f1\fnil\fcharset0 Tahoma-Bold;}
{\colortbl;\red255\green255\blue255;\red27\green27\blue27;\red78\green78\blue78;}
{\*\expandedcolortbl;;\cssrgb\c14118\c14118\c14118;\cssrgb\c38039\c38039\c38039;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs25\fsmilli12750 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 2.\
[ALL][Swift] What is an optional in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 An optional is a type that can hold either a value or nil, representing the absence of a value. Declared using ?, e.g. String?.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 3.\
[ALL][Swift] What is the difference between struct and class in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Structs are value types, while classes are reference types.\'a0\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 4.\
[ALL][Swift] What is an actor in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 An actor is a reference type that 
\f1\b protects its mutable state
\f0\b0  by allowing only one task to access it at a time \'97 ensuring 
\f1\b data race safety
\f0\b0  in concurrent environments.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 5.\
[ALL][Swift] How does ?? (nil coalescing operator) work with optionals?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It provides a default value if the optional is nil.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 6.\
[ALL][Swift]\'a0What is optional chaining, and how does it work?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Optional chaining allows you to call properties, methods, or subscripts on an optional that might be nil. If any link in the chain is nil, the entire expression returns nil.\'a0Example:\'a0let length = person?.name?.count\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 7.\
[MID][Swift] How is an actor different from a class in Swift?\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\fs28 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 class: allows concurrent access, must be manually synchronized\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 actor: provides built-in 
\f1\b data isolation
\f0\b0  and serial execution of its internal mutable state\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 8.\
[MID][Swift] What does nonisolated mean in actor methods or properties?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It marks a method or property as safe to be accessed\'a0
\f1\b without actor isolation
\f0\b0 , typically because it is read-only and does not access mutable state.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 9.\
[MID][Swift] What is a protocol with an associated type, and how does it limit usage?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A protocol with an associated type (using associatedtype) cannot be used as a type-erased value directly (e.g., you can\'92t write let x: SomeProtocol unless you use any or erase it manually).\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 10.\
[MID][Swift] What is the difference between static and class functions in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Both define type-level methods, but class functions can be 
\f1\b overridden
\f0\b0  by subclasses, whereas static functions cannot.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 11.\
[MID][Swift] What are trailing closures in Swift, and how do they improve readability?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 If the last parameter of a function is a closure, it can be written 
\f1\b outside
\f0\b0  the parentheses, which enhances clarity in nested functional code.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 12.\
[MID][Swift] What is the purpose of the inout keyword in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It allows a function to modify a variable passed to it directly (by reference), rather than making a copy. It ensures the changes persist outside the function scope.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 13.\
[MID][Swift] What is a tuple type in Swift, and when might you use it?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A tuple is a lightweight, fixed-size group of values (e.g., (Int, String)), often used for temporary grouping without creating a struct.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 14.\
[MID][Swift] What causes a retain cycle in iOS?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A retain cycle occurs when two or more objects hold strong references to each other, preventing deallocation.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 15.\
[MID][Swift] What is a strong reference in iOS memory management?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A strong reference keeps an object in memory. When the reference count reaches zero, the object is deallocated.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 16.\
[MID][Swift] What is a weak reference, and why is it used in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A weak reference doesn't increase the retain count and is used to avoid strong reference cycles, especially in closures or delegate patterns.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 17.\
[MID][Swift] What is a metatype in Swift and how do you obtain it?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A metatype is the type of a type \'97 e.g., SomeType.Type. You can get it using .self, like String.self. It's useful for reflection, type comparison, and factory patterns.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 18.\
[MID][Swift] What\'92s the difference between is, as?, and as! in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 is: checks type at runtime\uc0\u8232  \
 \
as?: conditionally downcasts and returns optional\uc0\u8232  \
 \
as!: force downcast \'97 crashes if the cast fails\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 19.\
[MID][Swift] What does @MainActor do in Swift Concurrency?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It marks a function, property, or type as executing on the 
\f1\b main thread
\f0\b0 , ensuring thread-safety for UI and other main-thread-only resources.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 20.\
[MID][Swift] What is the role of the defer statement in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 defer defines code that runs 
\f1\b just before exiting the current scope
\f0\b0 , useful for cleanup like closing files or releasing locks.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 21.\
[MID][Swift] What is the difference between throw, rethrows, and throws in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 throw: used to raise an error.\uc0\u8232  \
 \
throws: declares a function can throw an error.\uc0\u8232  \
 \
rethrows: means the function only throws if the passed-in function throws.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 22.\
[MID][Swift] Explain the difference between heap and stack memory in iOS.\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 Stack
\f0\b0 : used for local variables and function calls; fast and managed automatically.\uc0\u8232  \
 \

\f1\b Heap
\f0\b0 : used for reference types (e.g., classes); managed via ARC and is slower due to dynamic allocation.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 23.\
[MID][Swift] What is a zombie object and how do you debug it?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A zombie object is one that has been deallocated but is still being accessed. You can enable "Zombie Objects" in Xcode\'92s scheme diagnostics to track and debug these crashes.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 24.\
[MID][Swift] What\'92s the difference between frame, bounds, and center in UIView?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 frame: position and size in superview\'92s coordinate space\uc0\u8232  \
 \
bounds: size and position in its own coordinate space\uc0\u8232  \
 \
center: midpoint of the view in its superview\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 25.\
[SEN][Swift] Explain the difference between any and some keywords in Swift.\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 some introduces an opaque return type (concrete but hidden from caller).\uc0\u8232  \
 \
any is used to refer to a 
\f1\b type-erased
\f0\b0  protocol (e.g., any View), supporting dynamic dispatch.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 26.\
[SEN][Swift] What is the difference between URLSession.shared and creating a custom URLSession?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 URLSession.shared is a singleton used for basic tasks.\uc0\u8232  \
 \
Custom sessions let you configure things like caching, timeouts, and background transfers.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 27.\
[SEN][Swift] What are property observers in Swift, and what are the two types?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Property observers are willSet and didSet, which run before and after a property is set, respectively.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 28.\
[SEN][Swift] Can two actors call each other\'92s methods? How is deadlock avoided?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Yes, they can call each other asynchronously. Swift Concurrency uses 
\f1\b structured concurrency and cooperative suspension
\f0\b0 , which avoids deadlocks unless you explicitly await on cycles without care\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 29.\
[SEN][Swift] How do weak and unowned references help prevent retain cycles?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Both avoid increasing the reference count.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 weak is optional and becomes nil when the referenced object is deallocated.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 unowned is non-optional and assumes the object will never be deallocated during its lifetime\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 30.\
[SEN][Swift] What is the role of opaque return types (some) in Swift, and how do they differ from protocol types (any)?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 some hides the 
\f1\b specific
\f0\b0  return type but preserves 
\f1\b type identity
\f0\b0 , enabling static dispatch. any allows dynamic dispatch but erases the underlying type.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 31.\
[SEN][Swift] Can optional types conform to protocols in Swift?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Yes, via conditional conformance. For example, Optional<T> conforms to Equatable if T does. You can also extend Optional with protocol requirements.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 32.\
[EXP][Swift] What\'92s the performance impact of actors in hot paths, and when might they be overkill?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Since actors serialize access, they can become bottlenecks in performance-critical paths. For low-contention or performance-sensitive cases, 
\f1\b lock-free structures
\f0\b0 , 
\f1\b isolated queues
\f0\b0 , or 
\f1\b manual synchronization
\f0\b0  may perform better.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 33.\
[EXP][Swift] What are existential types in Swift and how do they differ from generics?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Existential types (like any Protocol) allow for heterogeneous collections of protocol-conforming instances, while generics maintain type information and are monomorphized at compile time.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 34.\
[MID][Combine] What is the role of a Subscriber in Combine?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 A Subscriber receives values and completion events from a Publisher. Combine provides built-in subscribers like sink and assign.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 35.\
[MID][Combine]\'a0How do you cancel a Combine pipeline?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Keep a reference to the AnyCancellable returned by sink, assign, or other subscribers, and call .cancel() on it.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 36.\
[MID][Combine]\'a0What is the purpose of share() in Combine?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It 
\f1\b multicasts
\f0\b0  a subscription to multiple subscribers, so the upstream publisher runs only once. It\'92s used to avoid duplicated side effects (e.g., network calls).\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 37.\
[SEN][Combine]\'a0What is the difference between CurrentValueSubject and PassthroughSubject?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 CurrentValueSubject: stores and emits its 
\f1\b current value
\f0\b0  to new subscribers.\uc0\u8232  \
 \
PassthroughSubject: emits only new values and 
\f1\b does not store
\f0\b0  the current state.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 38.\
[SEN][Combine] What is a PassthroughSubject and when would you use it?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It's a publisher that you control manually by sending values to it via send(_:). It\'92s commonly used to bridge imperative code to Combine.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 39.\
[MID][SwiftUI][Combine] What is the difference between @Published (Combine) and @State (SwiftUI)?\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\fs28 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 @Published: used in ObservableObject to publish changes.\uc0\u8232  \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 @State: used inside views to manage local value state. They operate in 
\f1\b different layers
\f0\b0  but often work together.\uc0\u8232  \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 40.\
[ALL][SwiftUI] How would you embed a UIKit view inside SwiftUI and vice versa?\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 UIKit in SwiftUI:
\f0\b0  Use UIViewRepresentable or UIViewControllerRepresentable.\uc0\u8232  \
 \

\f1\b SwiftUI in UIKit:
\f0\b0  Use a UIHostingController.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 41.\
[ALL][SwiftUI] What is a GeometryReader and when is it appropriate to use it?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It\'92s a view that gives access to the size and position of its container. It's useful for layout calculations but can lead to performance issues if overused.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 42.\
[ALL][SwiftUI] How does SwiftUI handle view identity, and what role does .id() play in dynamic views?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 SwiftUI uses identity (like id) to differentiate and persist view state across updates. Without explicit .id(), SwiftUI may treat different views as the same, leading to incorrect reuse.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 43.\
[ALL][SwiftUI] How do you make a view respond to a tap gesture in SwiftUI?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Text("Tap me")\
\'a0 \'a0 .onTapGesture \{\
\'a0 \'a0 \'a0 \'a0 print("Tapped!")\
\'a0 \'a0 \}\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 44.\
[ALL][SwiftUI] What is the difference between onAppear and .task \{\} in SwiftUI?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 onAppear runs a synchronous or manually managed async task when a view appears.\uc0\u8232  \
 \
.task \{\} is designed for structured concurrency, automatically cancels if the view disappears or updates.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 45.\
[MID][SwiftUI] What does @ObservedObject require from the observed type?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 The object must conform to the ObservableObject protocol and mark its published properties with @Published.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 46.\
[MID][SwiftUI] What is the difference between @StateObject and @ObservedObject?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 @StateObject creates and owns the model; used when a view creates the object.\uc0\u8232  \
 \
@ObservedObject observes an existing object; used in child views.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 47.\
[MID][SwiftUI] How does @Binding relate to @State in SwiftUI?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 @Binding creates a 
\f1\b two-way connection
\f0\b0  to a @State or similar property, allowing child views to 
\f1\b read and write
\f0\b0  without owning the data.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 48.\
[MID][SwiftUI] What is the purpose of @EnvironmentObject, and what happens if it's not injected at runtime?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It accesses a 
\f1\b shared data object
\f0\b0  from the environment. If not provided via .environmentObject(...), the app 
\f1\b crashes at runtime
\f0\b0 .\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 49.\
[MID][SwiftUI] Why does SwiftUI require View to be a value type (struct) and not a class?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Because value types provide predictable identity, immutability, and structural comparison, allowing SwiftUI to efficiently compute view diffs.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 50.\
[MID][SwiftUI] How do you debounce or throttle user input in SwiftUI?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Use Combine\'92s debounce operator on a @Published property within an ObservableObject, and bind it to the SwiftUI view.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 51.\
[MID][SwiftUI] How can you trigger a view update without changing any @State or @Binding?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Use a dummy @State variable and change it manually (e.g., toggling a Bool) or use objectWillChange.send() if working with ObservableObject.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 52.\
[SEN][SwiftUI] Can @Binding be used for computed properties?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Not directly. But you can wrap bindings with computed access using Binding(get:set:) to create 
\f1\b custom bindings
\f0\b0 .\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 53.\
[ALL][Architecture] Why is Dependency Injection important in architectural design?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It promotes 
\f1\b loose coupling
\f0\b0  and makes components easier to test, replace, or reuse by injecting dependencies from the outside rather than instantiating them internally.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 54.\
[ALL][Architecture] What does VIPER stand for and what\'92s its main benefit?\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 View
\f0\b0 , 
\f1\b Interactor
\f0\b0 , 
\f1\b Presenter
\f0\b0 , 
\f1\b Entity
\f0\b0 , 
\f1\b Router
\f0\b0 \
 It enforces strict separation of concerns, improving testability and scalability in large codebases.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 55.\
[ALL][Architecture] In a SwiftUI app using MVVM, how is the ViewModel typically integrated with the view?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Using @StateObject or @ObservedObject, the ViewModel is bound to the view and triggers UI updates through property wrappers like @Published.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 56.\
[ALL][Architecture] What is the primary responsibility of the ViewModel in MVVM?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 The ViewModel holds presentation logic and transforms model data into a format suitable for the view, exposing data via bindings (e.g., Combine or @Published).\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 57.\
[ALL][Architecture] What property wrappers in SwiftUI are typically used to bind a View to its ViewModel?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 @StateObject: when the view creates the ViewModel.\uc0\u8232  \
 \
@ObservedObject: when the ViewModel is injected or shared.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 58.\
[MID][Architecture] What problem does the Coordinator pattern solve in iOS?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It 
\f1\b decouples navigation logic
\f0\b0  from view controllers, reducing their responsibilities and making flow logic testable and reusable.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 59.\
[MID][Architecture] Describe the direction of dependency flow in Clean Architecture.\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 Inner layers
\f0\b0 \'a0(e.g., domain entities) are independent and do not depend on outer layers (e.g., UI, frameworks). Dependencies point\'a0
\f1\b inward
\f0\b0 , promoting testability and separation of concerns.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 60.\
[MID][Architecture] How do you handle asynchronous network calls in a SwiftUI ViewModel?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 With async/await: use Task \{\} and update @Published or @MainActor-isolated properties.\
With Combine: use publishers and sink into @Published properties.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 61.\
[MID][Architecture] Should the ViewModel know anything about UIKit or SwiftUI? Why or why not?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 No. The ViewModel should remain\'a0
\f1\b UI-framework agnostic
\f0\b0 , exposing data and actions in an abstract, testable way \'97 making it easier to test and reuse.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 62.\
[SEN][Architecture] In Clean Architecture, what layer should contain business rules and policies?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 The 
\f1\b Use Case / Interactor
\f0\b0  layer contains application-specific business rules and orchestrates model objects.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 63.\
[SEN][Architecture] In a UIKit-based MVVM app, how do you bind data between ViewModel and View?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 With KVO (older)\uc0\u8232  \
 \
With Combine or RxSwift (modern), by subscribing to publishers exposed by the ViewModel and updating UI on change.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 64.\
[ALL][Testing] What does test code coverage measure?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It measures the percentage of your code that\'92s executed during your tests \'97 often used to identify untested code paths.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 65.\
[ALL][Testing] What are the three phases of a typical unit test?\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\b\fs28 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Arrange
\f0\b0 : Set up data and dependencies\uc0\u8232  \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\b \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Act
\f0\b0 : Execute the code under test\uc0\u8232  \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\b \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Assert
\f0\b0 : Verify the result\uc0\u8232  \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 66.\
[ALL][Testing] Why is dependency injection important for testable code?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It allows you to inject\'a0
\f1\b mocks\'a0
\f0\b0 or\'a0
\f1\b fakes\'a0
\f0\b0 instead of real dependencies, making it easier to test code in isolation.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 67.\
[MID][Testing] How do you access UI elements in an XCUITest?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Use accessibility identifiers:\
let app = XCUIApplication()\
let button = app.buttons["submitButton"]\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 68.\
[MID][Testing] How do you test async code using XCTest?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 Use XCTestExpectation or async/await with XCTAssert in async test methods:\
func testAsync() async throws \{\
\'a0 \'a0 let result = await fetchData()\
\'a0 \'a0 XCTAssertEqual(result, expected)\
\}\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 69.\
[MID][Testing] What\'92s the difference between a 
\f1\b mock
\f0\b0 , 
\f1\b stub
\f0\b0 , and 
\f1\b spy
\f0\b0 ?\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f1\b\fs28 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Stub
\f0\b0 : Returns predefined data\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Mock
\f0\b0 : Verifies interaction (e.g., method was called)\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Spy
\f0\b0 : Records information during the test (like arguments)\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 70.\
[MID][Testing] What is snapshot testing and when should you use it?\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf3 \strokec3 It compares the current UI (or object output) to a stored reference ("snapshot"). Useful for verifying UI changes over time.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 71.\
[MID][Problem Solving] You're seeing unexpected SwiftUI view reloads when updating a @Published property in the ViewModel. What could be causing it and how would you fix it?\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 What it tests:
\f0\b0  Understanding of SwiftUI\'92s rendering cycle, property wrappers, reference vs value semantics, Combine integration, and performance implications.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 72.\
[MID][Problem Solving] You notice that when scrolling quickly, your UICollectionView cells flicker or show incorrect data. What\'92s likely going wrong, and how would you address it\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 What it tests:
\f0\b0  Knowledge of cell reuse, data consistency, caching images, async loading issues, and managing updates on the main thread.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 73.\
[MID][Problem Solving]Your app slows down when processing large JSON payloads from the backend. What steps would you take to improve performance?\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 What it tests:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f0\b0 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Using background decoding (JSONDecoder) on a background queue\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Partial decoding (only what's needed)\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Using lazy or streaming parsing (e.g., with Codable and custom decoders)\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Pagination or limiting results server-side\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 74.\
[MID][Problem Solving] You need to collect location, contacts, and motion data for a new feature. How do you approach the implementation while respecting user privacy and performance?\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 What it tests:
\f0\b0 \
 \
 \
\pard\pardeftab720\partightenfactor0
\ls7\ilvl0\cf3 {\listtext	\'95	}Thoughtfulness about user prompts\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf3  \
\pard\pardeftab720\partightenfactor0
\ls8\ilvl0\cf3 {\listtext	\'95	}Conditional access requests (request when needed, not on launch)\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf3  \
\pard\pardeftab720\partightenfactor0
\ls9\ilvl0\cf3 {\listtext	\'95	}Clear usage description (Info.plist)\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf3  \
\pard\pardeftab720\partightenfactor0
\ls10\ilvl0\cf3 {\listtext	\'95	}Using minimal granularity (e.g., coarse location if fine isn't needed)\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf3  \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 75.\
[SEN][Problem Solving] A product manager asks for an \'93offline mode\'94 for an existing network-based app. How do you start scoping and designing this?\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 What it tests:
\f0\b0  Problem decomposition, caching strategies, Core Data or file-based storage, background sync, data consistency, and user experience under constraints.\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs25\fsmilli12750 \cf2 76.\
[EXP][Problem Solving] You need to upload a large file in the background, and the app must complete the task even if it\'92s suspended. How do you design this?\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs28 \cf3 \strokec3 What it tests:
\f0\b0 \
 \
 \
\pard\pardeftab720\partightenfactor0
\ls11\ilvl0\cf3 {\listtext	\'95	}Using URLSession with a background configuration\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf3  \
\pard\pardeftab720\partightenfactor0
\ls12\ilvl0\cf3 {\listtext	\'95	}Handling delegates via background session handlers\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf3  \
\pard\pardeftab720\partightenfactor0
\ls13\ilvl0\cf3 {\listtext	\'95	}Persisting task identifiers\uc0\u8232  \
\pard\pardeftab720\partightenfactor0
\cf3  \
\pard\pardeftab720\partightenfactor0
\ls14\ilvl0\cf3 {\listtext	\'95	}Gracefully resuming or notifying users upon relaunch\
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\
}